# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'username': 'str',
        'name': 'str',
        'avatar': 'str',
        'country_code': 'str',
        'phone_number': 'str',
        'email': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'username': 'username',
        'name': 'name',
        'avatar': 'avatar',
        'country_code': 'country_code',
        'phone_number': 'phone_number',
        'email': 'email'
    }

    def __init__(self, uuid=None, username=None, name=None, avatar=None, country_code=None, phone_number=None, email=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._username = None
        self._name = None
        self._avatar = None
        self._country_code = None
        self._phone_number = None
        self._email = None
        self.discriminator = None
        self.uuid = uuid
        self.username = username
        self.name = name
        self.avatar = avatar
        self.country_code = country_code
        self.phone_number = phone_number
        self.email = email

    @property
    def uuid(self):
        """Gets the uuid of this User.  # noqa: E501

         用户UUID  # noqa: E501

        :return: The uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this User.

         用户UUID  # noqa: E501

        :param uuid: The uuid of this User.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

         姓名  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

         姓名  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

         昵称  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

         昵称  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def avatar(self):
        """Gets the avatar of this User.  # noqa: E501

         头像  # noqa: E501

        :return: The avatar of this User.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this User.

         头像  # noqa: E501

        :param avatar: The avatar of this User.  # noqa: E501
        :type: str
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")  # noqa: E501

        self._avatar = avatar

    @property
    def country_code(self):
        """Gets the country_code of this User.  # noqa: E501

         国家码  # noqa: E501

        :return: The country_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this User.

         国家码  # noqa: E501

        :param country_code: The country_code of this User.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def phone_number(self):
        """Gets the phone_number of this User.  # noqa: E501

         手机号  # noqa: E501

        :return: The phone_number of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this User.

         手机号  # noqa: E501

        :param phone_number: The phone_number of this User.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

         邮箱  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

         邮箱  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
