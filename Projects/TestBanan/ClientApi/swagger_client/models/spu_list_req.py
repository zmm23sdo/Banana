# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpuListReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'brand_id': 'str',
        'sorter': 'str',
        'cursor': 'int',
        'page': 'int'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'brand_id': 'brandId',
        'sorter': 'sorter',
        'cursor': 'cursor',
        'page': 'page'
    }

    def __init__(self, category_id=None, brand_id=None, sorter='price', cursor=-1, page=10):  # noqa: E501
        """SpuListReq - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._brand_id = None
        self._sorter = None
        self._cursor = None
        self._page = None
        self.discriminator = None
        self.category_id = category_id
        if brand_id is not None:
            self.brand_id = brand_id
        self.sorter = sorter
        self.cursor = cursor
        self.page = page

    @property
    def category_id(self):
        """Gets the category_id of this SpuListReq.  # noqa: E501

         类别 id  # noqa: E501

        :return: The category_id of this SpuListReq.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SpuListReq.

         类别 id  # noqa: E501

        :param category_id: The category_id of this SpuListReq.  # noqa: E501
        :type: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def brand_id(self):
        """Gets the brand_id of this SpuListReq.  # noqa: E501

         品牌 id  # noqa: E501

        :return: The brand_id of this SpuListReq.  # noqa: E501
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this SpuListReq.

         品牌 id  # noqa: E501

        :param brand_id: The brand_id of this SpuListReq.  # noqa: E501
        :type: str
        """

        self._brand_id = brand_id

    @property
    def sorter(self):
        """Gets the sorter of this SpuListReq.  # noqa: E501

         排序关键字，当前只支持 price  # noqa: E501

        :return: The sorter of this SpuListReq.  # noqa: E501
        :rtype: str
        """
        return self._sorter

    @sorter.setter
    def sorter(self, sorter):
        """Sets the sorter of this SpuListReq.

         排序关键字，当前只支持 price  # noqa: E501

        :param sorter: The sorter of this SpuListReq.  # noqa: E501
        :type: str
        """
        if sorter is None:
            raise ValueError("Invalid value for `sorter`, must not be `None`")  # noqa: E501

        self._sorter = sorter

    @property
    def cursor(self):
        """Gets the cursor of this SpuListReq.  # noqa: E501

         滑动分页 id  # noqa: E501

        :return: The cursor of this SpuListReq.  # noqa: E501
        :rtype: int
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SpuListReq.

         滑动分页 id  # noqa: E501

        :param cursor: The cursor of this SpuListReq.  # noqa: E501
        :type: int
        """
        if cursor is None:
            raise ValueError("Invalid value for `cursor`, must not be `None`")  # noqa: E501

        self._cursor = cursor

    @property
    def page(self):
        """Gets the page of this SpuListReq.  # noqa: E501

         每页数量  # noqa: E501

        :return: The page of this SpuListReq.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SpuListReq.

         每页数量  # noqa: E501

        :param page: The page of this SpuListReq.  # noqa: E501
        :type: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpuListReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpuListReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
